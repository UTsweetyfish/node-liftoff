Description: Skip tests that require a node_modules directory.
Forwarded: not-needed
Author: Paolo Greppi <paolo.greppi@libpf.com>

--- a/test/index.js
+++ b/test/index.js
@@ -53,11 +53,11 @@
       expect(app.buildEnvironment({ cwd: path.join(__dirname, 'fixtures', 'case') }).configPath).to.equal(expected);
     });
 
-    it('should find module in the directory next to config', function() {
+    it.skip('should find module in the directory next to config', function() {
       expect(app.buildEnvironment().modulePath).to.equal(path.resolve('node_modules/mocha/index.js'));
     });
 
-    it('should require the package sibling to the module', function() {
+    it.skip('should require the package sibling to the module', function() {
       expect(app.buildEnvironment().modulePackage).to.equal(require('../node_modules/mocha/package.json'));
     });
 
@@ -66,7 +66,7 @@
     });
 
     describe('for developing against yourself', function() {
-      it('should find and load package.json', function(done) {
+      it.skip('should find and load package.json', function(done) {
         var fixturesDir = path.resolve(__dirname, 'fixtures');
         var cwd = path.resolve(fixturesDir, 'developing_yourself');
 
@@ -84,7 +84,7 @@
         }
       });
 
-      it('should clear modulePackage if package.json is of different project',
+      it.skip('should clear modulePackage if package.json is of different project',
       function(done) {
         var fixturesDir = path.resolve(__dirname, 'fixtures');
         var cwd = path.resolve(fixturesDir, 'developing_yourself/app1');
@@ -102,7 +102,7 @@
         }
       });
 
-      it('should use `index.js` if `main` property in package.json ' +
+      it.skip('should use `index.js` if `main` property in package.json ' +
       'does not exist', function(done) {
         var fixturesDir = path.resolve(__dirname, 'fixtures');
         var cwd = path.resolve(fixturesDir, 'developing_yourself/app2');
@@ -179,7 +179,7 @@
       }).to.throw();
     });
 
-    it('should skip respawning if process.argv has no values from v8flags in it', function(done) {
+    it.skip('should skip respawning if process.argv has no values from v8flags in it', function(done) {
       exec('node test/fixtures/prepare-execute/v8flags.js', function(err, stdout, stderr) {
         expect(stderr).to.equal('\n');
         exec('node test/fixtures/prepare-execute/v8flags_function.js', function(err, stdout, stderr) {
@@ -189,7 +189,7 @@
       });
     });
 
-    it('should respawn if process.argv has values from v8flags in it', function(done) {
+    it.skip('should respawn if process.argv has values from v8flags in it', function(done) {
       exec('node test/fixtures/prepare-execute/v8flags.js --lazy', function(err, stdout, stderr) {
         expect(stderr).to.equal('--lazy\n');
         exec('node test/fixtures/prepare-execute/v8flags_function.js --lazy', function(err, stdout, stderr) {
@@ -199,7 +199,7 @@
       });
     });
 
-    it('should throw if v8flags is a function and it causes an error', function(done) {
+    it.skip('should throw if v8flags is a function and it causes an error', function(done) {
       exec('node test/fixtures/prepare-execute/v8flags_error.js --lazy', function(err, stdout, stderr) {
         expect(err).not.to.equal(null);
         expect(stdout).to.equal('');
@@ -208,7 +208,7 @@
       });
     });
 
-    it('should respawn if v8flag is set by forcedFlags', function(done) {
+    it.skip('should respawn if v8flag is set by forcedFlags', function(done) {
       exec('node test/fixtures/prepare-execute/v8flags_config.js 123', cb);
 
       function cb(err, stdout, stderr) {
@@ -222,7 +222,7 @@
       }
     });
 
-    it('should respawn if v8flag is set by both cli flag and forcedFlags', function(done) {
+    it.skip('should respawn if v8flag is set by both cli flag and forcedFlags', function(done) {
       exec('node test/fixtures/prepare-execute/v8flags_config.js 123 --harmony abc', cb);
 
       function cb(err, stdout, stderr) {
@@ -237,7 +237,7 @@
       }
     });
 
-    it('should emit a respawn event if a respawn is required', function(done) {
+    it.skip('should emit a respawn event if a respawn is required', function(done) {
       exec('node test/fixtures/prepare-execute/v8flags.js', function(err, stdout) {
         expect(stdout).to.be.empty;
         exec('node test/fixtures/prepare-execute/v8flags_function.js --lazy', function(err, stdout) {
@@ -247,14 +247,14 @@
       });
     });
 
-    it('should respawn if process.argv has v8flags with values in it', function(done) {
+    it.skip('should respawn if process.argv has v8flags with values in it', function(done) {
       exec('node test/fixtures/prepare-execute/v8flags_value.js --stack_size=2048', function(err, stdout, stderr) {
         expect(stderr).to.equal('--stack_size=2048\n');
         done();
       });
     });
 
-    it('should respawn if v8flags is empty but forcedFlags are specified', function(done) {
+    it.skip('should respawn if v8flags is empty but forcedFlags are specified', function(done) {
       exec('node test/fixtures/prepare-execute/nodeflags_only.js 123', cb);
 
       function cb(err, stdout, stderr) {
@@ -347,7 +347,7 @@
       }
     });
 
-    it('should emit `require` with the name of the module and the required module', function(done) {
+    it.skip('should emit `require` with the name of the module and the required module', function(done) {
       var requireTest = new Liftoff({ name: 'require' });
       requireTest.on('require', function(name, module) {
         expect(name).to.equal('mocha');
